name: Test Coverage CI

on:
  push:
    branches: [ main, develop, feature/*, fix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio httpx
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          fi
          
      - name: Create test database
        run: |
          mkdir -p backend/app/tests/data
          touch backend/app/tests/data/test.db
          
      - name: Show test structure
        run: |
          echo "Project structure:"
          find backend -name "test_*.py" | sort
          
      - name: Run tests with coverage
        env:
          DATABASE_URL: "sqlite:///./test.db"
          ACCESS_TOKEN_EXPIRE_MINUTES: "11520"
          SECRET_KEY: "testingsecretkey"
          TESTING: "True"
        run: |
          cd backend
          python -m pytest --cov=app --cov-report=xml --cov-report=term-missing
        continue-on-error: true
          
      - name: Verify coverage
        run: |
          cd backend
          if [ -f coverage.xml ]; then
            echo "Coverage report found. Processing..."
            python -c "
import sys
import os
import xml.etree.ElementTree as ET

try:
    # Parse the coverage XML report
    if not os.path.exists('coverage.xml'):
        print('❌ Coverage file not found')
        sys.exit(0)
        
    tree = ET.parse('coverage.xml')
    root = tree.getroot()

    # Get overall coverage
    overall_coverage = float(root.attrib.get('line-rate', 0)) * 100
    print(f'Overall coverage: {overall_coverage:.2f}%')

    # Check coverage for security-critical packages
    security_critical = [
        'app.api.v1.endpoints.auth', 
        'app.core.security', 
        'app.api.v1.endpoints.roles',
        'app.core.rbac'
    ]
    
    # Find all packages in coverage report
    print('\\nPackages found in coverage report:')
    found_packages = []
    for package in root.findall('.//package'):
        pkg_name = package.attrib.get('name', '')
        found_packages.append(pkg_name)
        print(f'- {pkg_name}: {float(package.attrib.get(\"line-rate\", 0)) * 100:.2f}%')
        
    print('\\nSecurity-critical packages:')
    security_critical_found = False
    for pkg in security_critical:
        for found_pkg in found_packages:
            if pkg in found_pkg:
                security_critical_found = True
                print(f'- {found_pkg}')
                
    if not security_critical_found:
        print('❌ No security-critical packages found in coverage report')
        
    # Output coverage info but don't fail the build yet
    print('\\n✅ Coverage check complete')
except Exception as e:
    print(f'❌ Error analyzing coverage: {str(e)}')
    import traceback
    traceback.print_exc()
            "
          else
            echo "❌ No coverage report generated"
          fi
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/coverage.xml
          if-no-files-found: ignore